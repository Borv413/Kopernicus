// Material wrapper generated by shader translator tool
using System;
using System.Reflection;
using UnityEngine;

namespace Kopernicus.Components
{
    namespace MaterialWrapper
    {
        public class TerrainGasGiant : Material
        {
            // Internal property ID tracking object
            protected class Properties
            {
                // Return the shader for this wrapper
                private const string shaderName = "Terrain/Gas Giant";
                public static Shader shader
                {
                    get { return Shader.Find (shaderName); }
                }

                // Opacity, default = 1
                public const string opacityKey = "_Opacity";
                public int opacityID { get; private set; }

                // LightDirection, default = (1,0,0,0)
                public const string localLightDirectionKey = "_localLightDirection";
                public int localLightDirectionID { get; private set; }

                // Singleton instance
                private static Properties singleton = null;
                public static Properties Instance
                {
                    get
                    {
                        // Construct the singleton if it does not exist
                        if(singleton == null)
                            singleton = new Properties();
            
                        return singleton;
                    }
                }

                private Properties()
                {
                    opacityID = Shader.PropertyToID(opacityKey);
                    localLightDirectionID = Shader.PropertyToID(localLightDirectionKey);
                }
            }

            // Is some random material this material
            public static bool UsesSameShader(Material m)
            {
            	return m.shader.name == Properties.shader.name;
            }

            // Opacity, default = 1
            public float opacity
            {
                get { return GetFloat (Properties.Instance.opacityID); }
                set { SetFloat (Properties.Instance.opacityID, Mathf.Clamp(value,0f, 1f)); }
            }

            // LightDirection, default = (1,0,0,0)
            public Vector4 localLightDirection
            {
                get { return GetVector (Properties.Instance.localLightDirectionID); }
                set { SetVector (Properties.Instance.localLightDirectionID, value); }
            }

            public TerrainGasGiant() : base(Properties.shader)
            {
            }

            public TerrainGasGiant(string contents) : base(contents)
            {
                base.shader = Properties.shader;
            }

            public TerrainGasGiant(Material material) : base(material)
            {
                // Throw exception if this material was not the proper material
                if (material.shader.name != Properties.shader.name)
                    throw new InvalidOperationException("Type Mismatch: Terrain/Gas Giant shader required");
            }

        }
    }
}
