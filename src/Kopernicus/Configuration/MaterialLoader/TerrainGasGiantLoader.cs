// Material wrapper generated by shader translator tool
using System;
using System.Reflection;
using UnityEngine;

using Kopernicus.Components.MaterialWrapper;

namespace Kopernicus.Components
{
    namespace Configuration
    {
        public class TerrainGasGiantLoader : TerrainGasGiant
        {
            // Cloud Pattern Texture, default = "white" {}
            [ParserTarget("		CloudPatternTexture", optional = true)]
            public Texture2DParser 		CloudPatternTextureSetter
            {
                get { return 		CloudPatternTexture; }
                set { 		CloudPatternTexture = value; }
            }

            [ParserTarget("		CloudPatternTextureScale", optional = true)]
            private Vector2Parser 		CloudPatternTextureScaleSetter
            {
                get { return 		CloudPatternTextureScale; }
                set { 		CloudPatternTextureScale = value; }
            }

            [ParserTarget("		CloudPatternTextureOffset", optional = true)]
            private Vector2Parser 		CloudPatternTextureOffsetSetter
            {
                get { return 		CloudPatternTextureOffset; }
                set { 		CloudPatternTextureOffset = value; }
            }

            // Cloud Colour Map, default = "white" {}
            [ParserTarget("		CloudColorMap", optional = true)]
            public Texture2DParser 		CloudColorMapSetter
            {
                get { return 		CloudColorMap; }
                set { 		CloudColorMap = value; }
            }

            [ParserTarget("		CloudColorMapScale", optional = true)]
            private Vector2Parser 		CloudColorMapScaleSetter
            {
                get { return 		CloudColorMapScale; }
                set { 		CloudColorMapScale = value; }
            }

            [ParserTarget("		CloudColorMapOffset", optional = true)]
            private Vector2Parser 		CloudColorMapOffsetSetter
            {
                get { return 		CloudColorMapOffset; }
                set { 		CloudColorMapOffset = value; }
            }

            // Cloud Colour Map 2, default = "white" {}
            [ParserTarget("		CloudColorMap2", optional = true)]
            public Texture2DParser 		CloudColorMap2Setter
            {
                get { return 		CloudColorMap2; }
                set { 		CloudColorMap2 = value; }
            }

            [ParserTarget("		CloudColorMap2Scale", optional = true)]
            private Vector2Parser 		CloudColorMap2ScaleSetter
            {
                get { return 		CloudColorMap2Scale; }
                set { 		CloudColorMap2Scale = value; }
            }

            [ParserTarget("		CloudColorMap2Offset", optional = true)]
            private Vector2Parser 		CloudColorMap2OffsetSetter
            {
                get { return 		CloudColorMap2Offset; }
                set { 		CloudColorMap2Offset = value; }
            }

            // Normal Map, default = "bump" {}
            [ParserTarget("		NormalMap", optional = true)]
            public Texture2DParser 		NormalMapSetter
            {
                get { return 		NormalMap; }
                set { 		NormalMap = value; }
            }

            [ParserTarget("		NormalMapScale", optional = true)]
            private Vector2Parser 		NormalMapScaleSetter
            {
                get { return 		NormalMapScale; }
                set { 		NormalMapScale = value; }
            }

            [ParserTarget("		NormalMapOffset", optional = true)]
            private Vector2Parser 		NormalMapOffsetSetter
            {
                get { return 		NormalMapOffset; }
                set { 		NormalMapOffset = value; }
            }

            // Specular Color, default = (0.5,0.5,0.5,1)
            [ParserTarget("		SpecularColor", optional = true)]
            public Vector4Parser 		SpecularColorSetter
            {
                get { return 		SpecularColor; }
                set { 		SpecularColor = value; }
            }

            // Movement Texture, default = "black" {}
            [ParserTarget("		MovementTexture", optional = true)]
            public Texture2DParser 		MovementTextureSetter
            {
                get { return 		MovementTexture; }
                set { 		MovementTexture = value; }
            }

            [ParserTarget("		MovementTextureScale", optional = true)]
            private Vector2Parser 		MovementTextureScaleSetter
            {
                get { return 		MovementTextureScale; }
                set { 		MovementTextureScale = value; }
            }

            [ParserTarget("		MovementTextureOffset", optional = true)]
            private Vector2Parser 		MovementTextureOffsetSetter
            {
                get { return 		MovementTextureOffset; }
                set { 		MovementTextureOffset = value; }
            }

            // Band Movement Speed, default = 0.05
            [ParserTarget("		BandMovementSpeed", optional = true)]
            public NumericParser<float> 		BandMovementSpeedSetter
            {
                get { return 		BandMovementSpeed; }
                set { 		BandMovementSpeed = value; }
            }

            // Swirl Rotation Control Texture, default = "black" {}
            [ParserTarget("		SwirlRotationControlTexture", optional = true)]
            public Texture2DParser 		SwirlRotationControlTextureSetter
            {
                get { return 		SwirlRotationControlTexture; }
                set { 		SwirlRotationControlTexture = value; }
            }

            [ParserTarget("		SwirlRotationControlTextureScale", optional = true)]
            private Vector2Parser 		SwirlRotationControlTextureScaleSetter
            {
                get { return 		SwirlRotationControlTextureScale; }
                set { 		SwirlRotationControlTextureScale = value; }
            }

            [ParserTarget("		SwirlRotationControlTextureOffset", optional = true)]
            private Vector2Parser 		SwirlRotationControlTextureOffsetSetter
            {
                get { return 		SwirlRotationControlTextureOffset; }
                set { 		SwirlRotationControlTextureOffset = value; }
            }

            // Swirl Rotation Speed, default = 1
            [ParserTarget("		SwirlRotationSpeed", optional = true)]
            public NumericParser<float> 		SwirlRotationSpeedSetter
            {
                get { return 		SwirlRotationSpeed; }
                set { 		SwirlRotationSpeed = value; }
            }

            // Swirl Rotation Swirliness, default = 1
            [ParserTarget("		SwirlRotationSwirliness", optional = true)]
            public NumericParser<float> 		SwirlRotationSwirlinessSetter
            {
                get { return 		SwirlRotationSwirliness; }
                set { 		SwirlRotationSwirliness = value; }
            }

            // Swirl Pan Speed, default = -0.05
            [ParserTarget("		SwirlPanSpeed", optional = true)]
            public NumericParser<float> 		SwirlPanSpeedSetter
            {
                get { return 		SwirlPanSpeed; }
                set { 		SwirlPanSpeed = value; }
            }

            // Detail Cloud Pattern Texture, default = "white" {}
            [ParserTarget("		DetailCloudPatternTexture", optional = true)]
            public Texture2DParser 		DetailCloudPatternTextureSetter
            {
                get { return 		DetailCloudPatternTexture; }
                set { 		DetailCloudPatternTexture = value; }
            }

            [ParserTarget("		DetailCloudPatternTextureScale", optional = true)]
            private Vector2Parser 		DetailCloudPatternTextureScaleSetter
            {
                get { return 		DetailCloudPatternTextureScale; }
                set { 		DetailCloudPatternTextureScale = value; }
            }

            [ParserTarget("		DetailCloudPatternTextureOffset", optional = true)]
            private Vector2Parser 		DetailCloudPatternTextureOffsetSetter
            {
                get { return 		DetailCloudPatternTextureOffset; }
                set { 		DetailCloudPatternTextureOffset = value; }
            }

            // Detail Cloud Colour Map, default = "white" {}
            [ParserTarget("		DetailCloudColorMap", optional = true)]
            public Texture2DParser 		DetailCloudColorMapSetter
            {
                get { return 		DetailCloudColorMap; }
                set { 		DetailCloudColorMap = value; }
            }

            [ParserTarget("		DetailCloudColorMapScale", optional = true)]
            private Vector2Parser 		DetailCloudColorMapScaleSetter
            {
                get { return 		DetailCloudColorMapScale; }
                set { 		DetailCloudColorMapScale = value; }
            }

            [ParserTarget("		DetailCloudColorMapOffset", optional = true)]
            private Vector2Parser 		DetailCloudColorMapOffsetSetter
            {
                get { return 		DetailCloudColorMapOffset; }
                set { 		DetailCloudColorMapOffset = value; }
            }

            // Detail Normal Map, default = "bump" {}
            [ParserTarget("		DetailNormalMap", optional = true)]
            public Texture2DParser 		DetailNormalMapSetter
            {
                get { return 		DetailNormalMap; }
                set { 		DetailNormalMap = value; }
            }

            [ParserTarget("		DetailNormalMapScale", optional = true)]
            private Vector2Parser 		DetailNormalMapScaleSetter
            {
                get { return 		DetailNormalMapScale; }
                set { 		DetailNormalMapScale = value; }
            }

            [ParserTarget("		DetailNormalMapOffset", optional = true)]
            private Vector2Parser 		DetailNormalMapOffsetSetter
            {
                get { return 		DetailNormalMapOffset; }
                set { 		DetailNormalMapOffset = value; }
            }

            // Detail Tiling, default = 10
            [ParserTarget("		DetailTiling", optional = true)]
            public NumericParser<float> 		DetailTilingSetter
            {
                get { return 		DetailTiling; }
                set { 		DetailTiling = value; }
            }

            // Near Distance For Detail, default = 50
            [ParserTarget("		NearDistanceForDetail", optional = true)]
            public NumericParser<float> 		NearDistanceForDetailSetter
            {
                get { return 		NearDistanceForDetail; }
                set { 		NearDistanceForDetail = value; }
            }

            // Near Detail, default = 0.8
            [ParserTarget("		NearDetail", optional = true)]
            public NumericParser<float> 		NearDetailSetter
            {
                get { return 		NearDetail; }
                set { 		NearDetail = value; }
            }

            // Far Distance For Detail, default = 200
            [ParserTarget("		FarDistanceForDetail", optional = true)]
            public NumericParser<float> 		FarDistanceForDetailSetter
            {
                get { return 		FarDistanceForDetail; }
                set { 		FarDistanceForDetail = value; }
            }

            // Far Detail, default = 0
            [ParserTarget("		FarDetail", optional = true)]
            public NumericParser<float> 		FarDetailSetter
            {
                get { return 		FarDetail; }
                set { 		FarDetail = value; }
            }

            // Opacity, default = 1
            [ParserTarget("		[PerRendererData] Opacity", optional = true)]
            public NumericParser<float> 		[PerRendererData] OpacitySetter
            {
                get { return 		[PerRendererData] Opacity; }
                set { 		[PerRendererData] Opacity = value; }
            }

            // Surface Into Emissive Multiplier, default = 0.5
            [ParserTarget("		SurfaceColourIntoEmissiveMultiplier", optional = true)]
            public NumericParser<float> 		SurfaceColourIntoEmissiveMultiplierSetter
            {
                get { return 		SurfaceColourIntoEmissiveMultiplier; }
                set { 		SurfaceColourIntoEmissiveMultiplier = value; }
            }

            // Rim Power, default = 3
            [ParserTarget("		rimPower", optional = true)]
            public NumericParser<float> 		rimPowerSetter
            {
                get { return 		rimPower; }
                set { 		rimPower = value; }
            }

            // Rim Blend, default = 1
            [ParserTarget("		rimBlend", optional = true)]
            public NumericParser<float> 		rimBlendSetter
            {
                get { return 		rimBlend; }
                set { 		rimBlend = value; }
            }

            // RimColorRamp, default = "white" {}
            [ParserTarget("		rimColorRamp", optional = true)]
            public Texture2DParser 		rimColorRampSetter
            {
                get { return 		rimColorRamp; }
                set { 		rimColorRamp = value; }
            }

            [ParserTarget("		rimColorRampScale", optional = true)]
            private Vector2Parser 		rimColorRampScaleSetter
            {
                get { return 		rimColorRampScale; }
                set { 		rimColorRampScale = value; }
            }

            [ParserTarget("		rimColorRampOffset", optional = true)]
            private Vector2Parser 		rimColorRampOffsetSetter
            {
                get { return 		rimColorRampOffset; }
                set { 		rimColorRampOffset = value; }
            }

            // LightDirection, default = (1,0,0,0)
            [ParserTarget("		[PerRendererData] localLightDirection", optional = true)]
            public Vector4Parser 		[PerRendererData] localLightDirectionSetter
            {
                get { return 		[PerRendererData] localLightDirection; }
                set { 		[PerRendererData] localLightDirection = value; }
            }

            // Constructors
            public TerrainGasGiantLoader () : base() { }
            public TerrainGasGiantLoader (string contents) : base (contents) { }
            public TerrainGasGiantLoader (Material material) : base(material) { }
        }
    }
}
